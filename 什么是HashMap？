https://mp.weixin.qq.com/s?__biz=MzAxOTc0NzExNg==&mid=2665514069&idx=1&sn=2996d864bbe596d0af763fba3d244fa7&chksm=80d67c16b7a1f500ec6a191eb4a0beac0e95dbd5a7bf8ee01f5ed2cb17960b9ab32c0b965949&scene=21#wechat_redirect

1、为什么要去了解hashmap的底层。
a.如果你能坚持看底层原理，至少可以证明是静得下心学习的人， （学会原理）证明了你和其他面试者不一样。
b.你学了这个一是能够证明你对编程的兴趣不是停留在表面、二是证明你比较有学习的能力。最重要的一点是企业通过这个筛选招聘，
你不会就不能进入好的公司，参与大的工程，难以提升自己的水平。

2、HaspMap简述
haspmap是一个用于存储key-value类型键值对的一个集合，每一个键值对叫做Entry。这些个Entry存储在数组中，这个数组也就是HaspMap的主干。
数组中每个元素的初始值都是null。

3、关于get和pet方法
HaspMap中最常见的方法就是get和pet方法，

a、put方法的原理
比如调用 hashMap.put("apple", 0) ，插入一个Key为“apple"的元素。这时候我们需要利用一个哈希函数来确定Entry的插入位置（index）：
index =  Hash（“apple”）假定最后计算出的index是2，那么结果就会插入数组中下标为2的位置。
注意，当插入的条目数Entry数过多的时候哈希函数会出现index重复的情况。
这时候该怎么办呢？我们可以利用链表来解决。HashMap数组的每一个元素不止是一个Entry对象，也是一个链表的头节点。
每一个Entry对象通过Next指针指向它的下一个Entry节点。当新来的Entry映射到冲突的数组位置时，只需要插入到对应的链表即可。

b、Get方法的原理
使用Get方法根据Key来查找Value的时候，首先会把输入的Key做一次Hash映射，得到对应的下标index =  Hash（“apple”）。
当碰上Hash冲突的时候，同一个位置有可能匹配到多个Entry，这时候就需要顺着对应链表的头节点，一个一个向下来查找。
也就是说当Hash映射的index重复的时候，就会顺着头结点向下找开始比对key的值，直到找到为止。

4、HashMap的初始长度是多少，自定义长度有什么要注意的吗？
HashMap的初始长度是16，如果自定义初始化长度必须是2的n次方。
之前说过，从Key映射到HashMap数组的对应位置，会用到一个Hash函数：index =  Hash（“apple”）
如何实现一个尽量均匀分布的Hash函数呢？我们通过利用Key的HashCode值来做某种运算。
index =  HashCode(Key) & (Length-1)
注意这里用的是位运算，在底层运算中位运算的效率极高。
下面我们以值为“book”的Key来演示整个过程：
a.计算book的hashcode，结果为十进制的3029737，二进制的101110001110101110 1001。
b.假定HashMap长度是默认的16，计算Length-1的结果为十进制的15，二进制的1111。
c.把以上两个结果做与运算，101110001110101110 1001 & 1111 = 1001，十进制是9，所以 index=9。
假设HashMap的长度是10，重复刚才的运算步骤。
会发现一个问题，如果初始化值不为2的n次方的话，取位运算的时候有些index的值永远无法计算出来。
